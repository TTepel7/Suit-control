import telebot
import os
import json
import rig
from keyboa import Keyboa
from telebot import types
import threading
import time
# token –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
te_bot = telebot.TeleBot('')

# –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
users = {}
if os.path.exists('users.json'):
    with open('users.json') as f:
        file_content = f.read()
        users = json.loads(file_content)


def notification():
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
    rig.clear_history()
    # —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–æ—Å—Ç—é–º–∞
    singlecast_messages = ['–í–Ω–µ –≥–µ–æ–∑–æ–Ω—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç',
                           '–í –≥–µ–æ–∑–æ–Ω—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç', '–í –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', '–í –æ–ø–∞—Å–Ω–æ–π –≥–µ–æ–∑–æ–Ω–µ', '–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞']
    while True:
        try:
            messages = rig.get_last_messages()
            for m in messages:
                if m['message-body'] == "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–º–æ—â—å!":
                    sos_mes = rig.get_sos_info(m['id'])
                    for user_id in users.keys():
                        te_bot.send_message(user_id, sos_mes)
                elif(m['message-body'] in singlecast_messages):
                    for user_id, user_data in users.items():
                        if user_data['notif'] == False:
                            pass
                        elif user_data['object_id'] == m['object']:
                            te_bot.send_message(user_id, m['message-body'])
                else:
                    for user_id, user_data in users.items():
                        if user_data['notif'] == True:
                            te_bot.send_message(user_id, m['message-body'])
                rig.set_read(m['_id'])
        except Exception:
            rig.clear_history()
        time.sleep(1)


@te_bot.message_handler(content_types=['text'])
def get_text_messages(message):
    try:
        if message.text.lower() == '/start':
            # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
            markup = types.ReplyKeyboardMarkup(resize_keyboard=False)
            status_b = types.KeyboardButton('–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ—Å—Ç—é–º–∞ üì°')
            notif_b = types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å/–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîî')
            suit_enable_b = types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å/–û—Ç–∫–ª—é—á–∏—Ç—å –∫–æ—Å—Ç—é–º üîõ')
            sos_b = types.KeyboardButton('–ü–æ–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª –ø–æ–º–æ—â–∏ üÜò')
            markup.row(status_b)
            markup.row(notif_b, suit_enable_b)
            markup.row(sos_b)
            te_bot.send_message(
                message.from_user.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ —á–∞—Ç –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—â–∏—Ç–Ω—ã–º –∫–æ—Å—Ç—é–º–æ–º –Ω–∞ —à–∞—Ö—Ç–µ.', reply_markup=markup)
            kb_suits = Keyboa(items=rig.get_suits_id()).keyboard
            te_bot.send_message(
                message.from_user.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫–æ—Å—Ç—é–º–∞.', reply_markup=kb_suits)
        elif message.text == '–í–∫–ª—é—á–∏—Ç—å/–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîî':
            # –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ/–≤–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫—Ä–æ–º–µ SOS
            users[str(message.from_user.id)]['notif'] = not users[str(
                message.from_user.id)]['notif']
            with open('users.json', 'w') as f:
                json.dump(users, f)
            if users[str(message.from_user.id)]['notif']:
                te_bot.send_message(message.from_user.id, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã')
            else:
                te_bot.send_message(message.from_user.id, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã')
        elif message.text == '–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ—Å—Ç—é–º–∞ üì°':
            stats = rig.get_stats(users[str(message.from_user.id)]['object_id'])
            te_bot.send_message(message.from_user.id, stats)
        elif message.text == "–í–∫–ª—é—á–∏—Ç—å/–û—Ç–∫–ª—é—á–∏—Ç—å –∫–æ—Å—Ç—é–º üîõ":
            suit = rig.switch_suit(users[str(message.from_user.id)]['object_id'])
            if suit:
                te_bot.send_message(message.from_user.id, "–ö–æ—Å—Ç—é–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            else:
                te_bot.send_message(message.from_user.id, "–ö–æ—Å—Ç—é–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        elif message.text == "–ü–æ–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª –ø–æ–º–æ—â–∏ üÜò":
            rig.send_sos()
            te_bot.send_message(message.from_user.id,
                                "–°–∏–≥–Ω–∞–ª –æ –ø–æ–º–æ—â–∏ –ø–æ–¥–∞–Ω, –æ–∂–∏–¥–∞–π—Ç–µ!")
        else:
            te_bot.send_message(message.from_user.id,
                                '–ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç.')
    except Exception:
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π')


@te_bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ—Å—Ç—é–º–∞
    try:
        users[str(call.from_user.id)] = {'object_id': call.data, 'notif': True}
        with open('users.json', 'w') as f:
            json.dump(users, f)
        te_bot.send_message(call.from_user.id,'Id —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–∞–±–æ—Ç–µ')
    except Exception:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")

# –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞, –∞ —Ç–∞–∫ –∂–µ –ø–æ—Ç–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
t = threading.Thread(target=notification)
t.start()
te_bot.polling(none_stop=True)